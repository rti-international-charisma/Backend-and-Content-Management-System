name: Deploy API to Amazon ECS

on:
  workflow_dispatch:

defaults:
  run:
    shell: bash
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    
    
    - name: Checkout source code
      uses: actions/checkout@v1
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 
      
    - name: pull postgres docker image and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_POSTGRES: ${{ secrets.ECR_REPOSITORY_POSTGRES }}
        IMAGE_NAME: postgres:12
        IMAGE_TAG: latest
      run: |
          # pull docker image ,tag it and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker pull $IMAGE_NAME
          docker tag $IMAGE_NAME $ECR_REGISTRY/$ECR_REPOSITORY_POSTGRES:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_POSTGRES:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_POSTGRES:$IMAGE_TAG"
          
    - name: Fill in the new image ID in the Amazon ECS task definitionfor postgres
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-postgres.json
        container-name: ${{ secrets.AWS_CONTAINER_NAME_POSTGRES }}
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.SERVICE_NAME_POSTGRES }}
        cluster: ${{ secrets.AWS_CLUSTER }}
        wait-for-service-stability: true
        
