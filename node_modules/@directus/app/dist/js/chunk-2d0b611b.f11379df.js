(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b611b"],{"1c1d":function(n,e,t){"use strict";t.r(e),e["default"]="# JavaScript SDK\n\n> The JS SDK is a small wrapper around [Axios](https://npmjs.com/axios) that makes it a little easier to use the\n> Directus API from a JavaScript powered project.\n\n[[toc]]\n\n## Installation\n\n```bash\nnpm install @directus/sdk-js\n```\n\n## TypeScript\n\nIf you are using TypeScript, the JS SDK requires TypeScript 3.8 or newer.\n\n## Usage\n\n```js\nimport DirectusSDK from '@directus/sdk-js';\n\nconst directus = new DirectusSDK('https://api.example.com/');\n```\n\n**NOTE** All methods return promises. Make sure to await methods, for example:\n\n```js\nimport DirectusSDK from '@directus/sdk-js';\n\nconst directus = new DirectusSDK('https://api.example.com/');\n\nasync function getData() {\n\t// Wait for login to be done...\n\tawait directus.auth.login({ email: 'admin@example.com', password: 'password' });\n\n\t// ... before fetching items\n\treturn await directus.items('articles').read();\n}\n\ngetData();\n```\n\n## Global\n\n### Initialize\n\n```js\nimport DirectusSDK from '@directus/sdk-js';\n\nconst directus = new DirectusSDK('https://api.example.com/');\n```\n\nThe SDK accepts a second optional `options` parameter:\n\n```js\nimport DirectusSDK from '@directus/sdk-js';\n\nconst directus = new DirectusSDK('https://api.example.com/', {\n\tauth: {\n\t\tstorage: new MemoryStore(), // Storage adapter where refresh tokens are stored in JSON mode\n\t\tmode: 'json', // What login mode to use. One of `json`, `cookie`. Defaults to `cookie`\n\t\tautoRefresh: true, // Whether or not to automatically refresh the access token on login. Defaults to `false`\n\t},\n});\n```\n\n### Get / Set API URL\n\n```js\n// Get the used API base URL\nconsole.log(directus.url);\n// => https://api.example.com/\n\n// Set the API base URL\ndirectus.url = 'https://api2.example.com';\n```\n\n### Access to Axios\n\nYou can tap into the Axios instance used directly through `directus.axios`.\n\n## Items\n\n### Create Single Item\n\n```js\ndirectus.items('articles').create({\n\ttitle: 'My New Article',\n});\n```\n\n### Create Multiple Items\n\n```js\ndirectus.items('articles').create([\n\t{\n\t\ttitle: 'My First Article',\n\t},\n\t{\n\t\ttitle: 'My Second Article',\n\t},\n]);\n```\n\n### Read All\n\n```js\ndirectus.items('articles').read();\n```\n\n### Read By Query\n\n```js\ndirectus.items('articles').read({\n\tsearch: 'Directus',\n\tfilter: {\n\t\tdate_published: {\n\t\t\t_gte: '$NOW',\n\t\t},\n\t},\n});\n```\n\n### Read By Primary Key(s)\n\n```js\n// One\ndirectus.items('articles').read(15);\n\n// Multiple\ndirectus.items('articles').read([15, 42]);\n```\n\nSupports optional query:\n\n```js\n// One\ndirectus.items('articles').read(15, { fields: ['title'] });\n\n// Multiple\ndirectus.items('articles').read([15, 42], { fields: ['title'] });\n```\n\n### Update One or More Item(s), Single Value\n\n```js\n// One\ndirectus.items('articles').update(15, {\n\ttitle: 'An Updated title',\n});\n\n// Multiple\ndirectus.items('articles').update([15, 42], {\n\ttitle: 'An Updated title',\n});\n```\n\nSupports optional query:\n\n```js\ndirectus.items('articles').update(15, { title: 'An Updated title' }, { fields: ['title'] });\n\ndirectus.items('articles').update([15, 42], { title: 'An Updated title' }, { fields: ['title'] });\n```\n\n### Update Multiple Items, Multiple Values\n\n```js\ndirectus.items('articles').update([\n\t{\n\t\tid: 15,\n\t\ttitle: 'Article 15',\n\t},\n\t{\n\t\tid: 42,\n\t\ttitle: 'Article 42',\n\t},\n]);\n```\n\nSupports optional query:\n\n```js\ndirectus.items('articles').update(\n\t[\n\t\t{\n\t\t\tid: 15,\n\t\t\ttitle: 'Article 15',\n\t\t},\n\t\t{\n\t\t\tid: 42,\n\t\t\ttitle: 'Article 42',\n\t\t},\n\t],\n\t{ fields: ['title'] }\n);\n```\n\n### Update Multiple Items by Query, Single Value\n\n```js\ndirectus.items('articles').update(\n\t{\n\t\tarchived: true,\n\t},\n\t{\n\t\tfilter: {\n\t\t\tpublish_date: {\n\t\t\t\t_gte: '$NOW',\n\t\t\t},\n\t\t},\n\t}\n);\n```\n\n### Delete\n\n```js\n// One\ndirectus.items('articles').delete(15);\n\n// Multiple\ndirectus.items('articles').delete([15, 42]);\n```\n\n## Activity\n\n### Read All Activity\n\n```js\ndirectus.activity.read();\n```\n\n### Read Activity By Query\n\n```js\ndirectus.activity.read({\n\tfilter: {\n\t\taction: {\n\t\t\t_eq: 'create',\n\t\t},\n\t},\n});\n```\n\n### Read Activity By Primary Key(s)\n\n```js\n// One\ndirectus.activity.read(15);\n\n// Multiple\ndirectus.activity.read([15, 42]);\n```\n\nSupports optional query:\n\n```js\n// One\ndirectus.activity.read(15, { fields: ['action'] });\n\n// Multiple\ndirectus.activity.read([15, 42], { fields: ['action'] });\n```\n\n### Create a Comment\n\n```js\ndirectus.activity.comments.create({\n\tcollection: 'articles',\n\titem: 15,\n\tcomment: 'Hello, world!',\n});\n```\n\n### Update a comment\n\n```js\ndirectus.activity.comments.update(31, { comment: 'Howdy, world!' });\n```\n\nNote: The passed key is the primary key of the comment\n\n### Delete a comment\n\n```js\ndirectus.activity.comments.delete(31);\n```\n\nNote: The passed key is the primary key of the comment\n\n## Auth\n\n### Configuration\n\nNote: these configuration options are passed in the top level SDK constructor.\n\n#### mode\n\n`cookie` or `json`. When in cookie mode, the API will set the refresh token in a `httpOnly` secure cookie that can't be\naccessed from client side JS. This is the most secure way to connect to the API from a public front-end website.\n\nWhen you can't rely on cookies, or need more control over handling the storage of the cookie, use `json` mode. This will\nreturn the refresh token like \"regular\" in the payload. You can use the `storage` option (see below) to control where\nthe refresh token is stored / read from. Defaults to `cookie`\n\n#### storage\n\nWhen using `json` for mode, the refresh token needs to be stored somewhere. The `storage` option allows you to plug in\nany object that has an async `setItem()` and `getItem()` method. This allows you to plugin thingsÂ like\n[`localforage`](https://github.com/localForage/localForage) directly:\n\n```js\nimport localforage from 'localforage';\nimport DirectusSDK from '@directus/sdk-js';\n\nconst directus = new DirectusSDK('https://api.example.com', { auth: { storage: localforage, mode: 'json' } });\n```\n\n#### autoRefresh\n\nWhether or not to automatically call `refresh()` when the access token is about to expire. Defaults to `false`\n\n### Get / Set Token\n\n```\ndirectus.auth.token = 'abc.def.ghi';\n```\n\n### Login\n\n```js\ndirectus.auth.login({ email: 'admin@example.com', password: 'd1r3ctu5' });\n```\n\n### Refresh\n\nNote: if you have autoRefresh enabled, you most likely won't need to use this manually.\n\n```js\ndirectus.auth.refresh();\n```\n\n### Logout\n\n```js\ndirectus.auth.logout();\n```\n\n### Request a Password Reset\n\n```js\ndirectus.auth.password.request('admin@example.com');\n```\n\n### Reset a Password\n\n```js\ndirectus.auth.password.reset('abc.def.ghi', 'n3w-p455w0rd');\n```\n\nNote: the token passed in the first parameter is sent in an email to the user when using `request()`\n\n## Collections\n\n```js\ndirectus.collections;\n```\n\nSame methods as `directus.items(collection)`.\n\n## Fields\n\n```js\ndirectus.fields;\n```\n\nSame methods as `directus.items(collection)`.\n\n## Files\n\n```js\ndirectus.files;\n```\n\nSame methods as `directus.items(collection)`.\n\n## Folders\n\n```js\ndirectus.folders;\n```\n\nSame methods as `directus.items(collection)`.\n\n## Permissions\n\n```js\ndirectus.permissions;\n```\n\nSame methods as `directus.items(collection)`.\n\n## Presets\n\n```js\ndirectus.presets;\n```\n\nSame methods as `directus.items(collection)`.\n\n## Relations\n\n```js\ndirectus.relations;\n```\n\nSame methods as `directus.items(collection)`.\n\n## Revisions\n\n```js\ndirectus.revisions;\n```\n\nSame methods as `directus.items(collection)`.\n\n## Roles\n\n```js\ndirectus.roles;\n```\n\nSame methods as `directus.items(collection)`.\n\n## Server\n\n### Get the API Spec in OAS Format\n\n```js\ndirectus.server.specs.oas();\n```\n\n### Ping the Server\n\n```js\ndirectus.server.ping();\n```\n\n### Get Server/Project Info\n\n```js\ndirectus.server.info();\n```\n\n## Settings\n\n```js\ndirectus.settings;\n```\n\nSame methods as `directus.items(collection)`.\n\n## Users\n\n```js\ndirectus.users;\n```\n\nSame methods as `directus.items(collection)`, and:\n\n### Invite a New User\n\n```js\ndirectus.users.invite('admin@example.com', 'fe38136e-52f7-4622-8498-112b8a32a1e2');\n```\n\nThe second parameter is the role of the user\n\n### Accept a User Invite\n\n```js\ndirectus.users.acceptInvite('abc.def.ghi', 'n3w-p455w0rd');\n```\n\nThe provided token is sent to the user's email\n\n### Enable Two-Factor Authentication\n\n```js\ndirectus.users.tfa.enable('my-password');\n```\n\n### Disable Two-Factor Authentication\n\n```js\ndirectus.users.tfa.disable('691402');\n```\n\n### Get the Current User\n\n```js\ndirectus.users.me.read();\n```\n\nSupports optional query:\n\n```js\ndirectus.users.me.read({\n\tfields: ['last_access'],\n});\n```\n\n### Update the Current Users\n\n```js\ndirectus.users.me.update({ first_name: 'Admin' });\n```\n\nSupports optional query:\n\n```js\ndirectus.users.me.update({ first_name: 'Admin' }, { fields: ['last_access'] });\n```\n\n## Utils\n\n### Get a Random String\n\n```js\ndirectus.utils.random.string();\n```\n\nSupports an optional `length`:\n\n```js\ndirectus.utils.random.string(32);\n```\n\n### Generate a Hash for a Given Value\n\n```js\ndirectus.utils.hash.generate('My String');\n```\n\n### Verify if a Hash is Valid\n\n```js\ndirectus.utils.hash.verify('My String', '$argon2i$v=19$m=4096,t=3,p=1$A5uogJh');\n```\n\n### Sort Items in a Collection\n\n```js\ndirectus.utils.sort('articles', 15, 42);\n```\n\nThis will move item 15 to the position of item 42, and move everything in between one \"slot\" up\n\n### Revert to a Previous Revision\n\n```js\ndirectus.utils.revert(451);\n```\n\nNote: the key passed is the primary key of the revision you'd like to apply\n"}}]);