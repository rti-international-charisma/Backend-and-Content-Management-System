(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c910e"],{"580e":function(n,e,t){"use strict";t.r(e),e["default"]='---\npageClass: page-reference\n---\n\n# Global Query Parameters\n\n> Most Directus API Endpoint operations can be manipulated with the following parameters. It is important to understand\n> them to get the most out of the platform.\n\n- [Fields](#fields)\n- [Filter](#filter)\n- [Search](#search)\n- [Sort](#sort)\n- [Limit](#limit)\n- [Offset](#offset) / [Page](#page)\n- [Deep](#deep)\n- [Metadata](#metadata)\n  - [Total Count](#total-count)\n  - [Filter Count](#filter-count)\n\n---\n\n## Fields\n\n<div class="two-up">\n<div class="left">\n\nChoose the fields that are returned in the current dataset. This parameter supports dot notation to request nested\nrelational fields. You can also use a wildcard (\\*) to include all fields at a specific depth.\n\n</div>\n</div>\n\n<div class="two-up">\n<div class="left">\n\n### Examples\n\nGet all top-level fields\\\n`*`\n\nGet all top-level fields and all second-level relational fields\\\n`*.*`\n\n::: warning Nested Wildcard\n\nWhile you can theoretically nest wildcards infinitely, it\'s not recommended for production use. Nested wildcards can\nresult in degraded performance, and circular parent-child-parent structures.\n\n:::\n\nGet all top-level fields and second-level relational fields within images\\\n`*,images.*`\n\nGet only the first_name and last_name fields\\\n`first_name,last_name`\n\nGet all top-level and second-level relational fields, and third-level fields within images.thumbnails\\\n`*.*,images.thumbnails.*`\n\n### Many-To-Any (Union Types)\n\nSeeing that Many-to-Any (m2a) fields have nested data from multiple collections, it\'s not always safe / wanted to fetch\nthe same field from every related collection. In m2a fields, you can use the following syntax to specify what fields to\nfetch from which related nested collection type:\\\n`?fields=<m2a-field>:<collection-scope>.<field>`.\n\nLets say we have a collection `pages` with a many-to-any field called `sections` that points to `headings`,\n`paragraphs`, and `videos`. We only want to fetch `title` and `level` from `headings`, `body` from `paragraphs` and\n`source` from `videos`. We can achieve that by using:\n\n```\nsections.item:headings.title\nsections.item:headings.level\nsections.item:paragraphs.body\nsections.item:videos.body\n```\n\nIn GraphQL, this can be achieved using [Union Types](/reference/api/graphql/#many-to-any-union-types).\n\n</div>\n<div class="right">\n\n### REST API\n\n```\n?fields=title,body,featured_image.*\n\n// or\n\n?fields[]=title\n&fields[]=body\n&fields[]=featured_image.*\n```\n\n### GraphQL\n\nn/a\n\n</div>\n</div>\n\n---\n\n## Filter\n\n<div class="two-up">\n<div class="left">\n\nUsed to search items in a collection that matches the filter\'s conditions. The filter param follows\n[the Filter Rules spec](/reference/filter-rules/), which includes additional information on logical operators (AND/OR),\nnested relational filtering, and dynamic variables.\n\n</div>\n</div>\n\n<div class="two-up">\n<div class="left">\n\n### Examples\n\nRetrieve all items where `first_name` equals "Rijk"\n\n```json\n{\n\t"first_name": {\n\t\t"_eq": "Rijk"\n\t}\n}\n```\n\nRetrieve all items in one of the following categories: "vegetables", "fruit"\n\n```json\n{\n\t"categories": {\n\t\t"_in": ["vegetables", "fruit"]\n\t}\n}\n```\n\nRetrieve all items that are published between two dates\n\n```json\n{\n\t"date_published": {\n\t\t"_between": ["2021-01-24", "2021-02-23"]\n\t}\n}\n```\n\nRetrieve all items where the author\'s "vip" flag is true\n\n```json\n{\n\t"author": {\n\t\t"vip": {\n\t\t\t"_eq": true\n\t\t}\n\t}\n}\n```\n\n::: tip Nested Filters\n\nThe above example will filter the _top level_ items based on a condition _in_ the related item. If you\'re looking to\nfilter the related items themselves, take a look at [the `deep` parameter](#deep)!\n\n:::\n\n</div>\n<div class="right">\n\n### REST API\n\n```\n?filter[first_name][_eq]=Rijk\n\n// or\n\n?filter={ "first_name": { "_eq": "Rijk" }}\n```\n\n### GraphQL\n\n```graphql\nquery {\n\titems {\n\t\tusers(filter: { first_name: { _eq: "Rijk" } }) {\n\t\t\tid\n\t\t}\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Search\n\n<div class="two-up">\n<div class="left">\n\nThe search parameter allows you to perform a search on all string and text type fields within a collection. It\'s an easy\nway to search for an item without creating complex field filters – though it is far less optimized. It only searches the\nroot item\'s fields, related item fields are not included.\n\n</div>\n</div>\n\n<div class="two-up">\n<div class="left">\n\n### Example\n\nFind all items that mention Directus\\\n`Directus`\n\n</div>\n<div class="right">\n\n### REST API\n\n```\n?search=Directus\n```\n\n### GraphQL\n\n```graphql\nquery {\n\titems {\n\t\tarticles(search: "Directus") {\n\t\t\tid\n\t\t}\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Sort\n\n<div class="two-up">\n<div class="left">\n\nWhat field(s) to sort by. Sorting defaults to ascending, but a minus sign (`-`) can be used to reverse this to\ndescending order. Fields are prioritized by the order in the parameter.\n\n</div>\n</div>\n\n<div class="two-up">\n<div class="left">\n\n### Examples\n\nSort by creation date descending\\\n`-date_created`\n\nSort by a "sort" field, followed by publish date descending\\\n`sort, -publish_date`\n\n</div>\n<div class="right">\n\n### REST API\n\n```\n?sort=sort,-date_created\n\n// or\n\n?sort[]=sort\n&sort[]=-date_created\n```\n\n### GraphQL\n\n```graphql\nquery {\n\titems {\n\t\tarticles(sort: ["sort", "-date_created"]) {\n\t\t\tid\n\t\t}\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Limit\n\n<div class="two-up">\n<div class="left">\n\nSet the maximum number of items that will be returned. The default limit is set to `100`.\n\n</div>\n</div>\n\n<div class="two-up">\n<div class="left">\n\n### Examples\n\nGet the first 200 items\\\n`200`\n\nGet all items\\\n`-1`\n\n::: warning All Items\n\nDepending on the size of your collection, fetching unlimited data may result in degraded performance or timeouts, use\nwith caution.\n\n:::\n\n</div>\n<div class="right">\n\n### REST API\n\n```\n?limit=200\n```\n\n### GraphQL\n\n```graphql\nquery {\n\titems {\n\t\tarticles(limit: 200) {\n\t\t\tid\n\t\t}\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Offset\n\n<div class="two-up">\n<div class="left">\n\nSkip the first `n` items in the response. Can be used for pagination.\n\n</div>\n</div>\n\n<div class="two-up">\n<div class="left">\n\n### Examples\n\nGet items 100—200\\\n`100`\n\n</div>\n<div class="right">\n\n### REST API\n\n```\n?offset=100\n```\n\n### GraphQL\n\n```graphql\nquery {\n\titems {\n\t\tarticles(offset: 100) {\n\t\t\tid\n\t\t}\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Page\n\n<div class="two-up">\n<div class="left">\n\nAn alternative to `offset`. Page is a way to set `offset` under the hood by calculating `limit * page`. Page is\n1-indexed.\n\n</div>\n</div>\n\n<div class="two-up">\n<div class="left">\n\n### Examples\n\nGet items 1-100\\\n`1`\n\nGet items 101-200\\\n`2`\n\n</div>\n<div class="right">\n\n### REST API\n\n```\n?page=2\n```\n\n### GraphQL\n\n```graphql\nquery {\n\titems {\n\t\tarticles(page: 2) {\n\t\t\tid\n\t\t}\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Deep\n\n<div class="two-up">\n<div class="left">\n\nDeep allows you to set any of the other query parameters on a nested relational dataset.\n\n</div>\n</div>\n\n<div class="two-up">\n<div class="left">\n\n### Examples\n\nLimit the nested related articles to 3\n\n```json\n{\n\t"related_articles": {\n\t\t"_limit": 3\n\t}\n}\n```\n\nOnly get 3 related articles, with only the top rated comment nested\n\n```json\n{\n\t"related_articles": {\n\t\t"_limit": 3,\n\t\t"comments": {\n\t\t\t"_sort": "rating",\n\t\t\t"_limit": 1\n\t\t}\n\t}\n}\n```\n\n</div>\n<div class="right">\n\n### REST API\n\n```\n?deep[translations][_filter][languages_code][_eq]=en-US\n\n// or\n\n?deep={ "translations": { "_filter": { "languages_code": { "_eq": "en-US" }}}}\n```\n\n### GraphQL\n\nn/a\n\n</div>\n</div>\n\n---\n\n## Metadata\n\n<div class="two-up">\n<div class="left">\n\nMetadata allows you to retrieve some additional information about the items in the collection you\'re fetching. `*` can\nbe used as a wildcard to retrieve all metadata.\n\n</div>\n</div>\n\n<div class="two-up">\n<div class="left">\n\n### Total Count\n\nReturns the total item count of the collection you\'re querying.\n\n### Filter Count\n\nReturns the item count of the collection you\'re querying, taking the current filter/search parameters into account.\n\n</div>\n<div class="right">\n\n### REST API\n\n```\n?meta=total_count\n\n?meta=filter_count\n\n?meta=*\n```\n\n### GraphQL\n\nn/a\n\n</div>\n</div>\n\n---\n'}}]);