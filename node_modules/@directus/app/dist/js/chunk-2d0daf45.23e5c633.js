(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0daf45"],{"6e99":function(e,n,t){"use strict";t.r(n),n["default"]='# Configuring the API\n\n[[toc]]\n\n## Cache\n\nDirectus has a built-in way to do data-caching. Enabling this will cache the output of the request (based on the current\nuser and exact query parameters used) into to configured cache storage location. This will drastically improve API\nperformance, as subsequent requests are served straight from this cache. Enabling cache will also make Directus return\naccurate cache-control headers. Depending on your setup, this will further improve performance by caching the request in\nmiddleman servers (like CDNs) and even the browser.\n\nYou can enable the data-cache with the `CACHE_ENABLED` environment variable.\n\n### Cache Store\n\nIn bigger projects, you most likely don\'t want to rely on local memory to keep the caches. Instead, you can use the\n`CACHE_STORE` environment variable to tell Directus to use either `memcache` or `redis` to store the caches.\n\n```\nCACHE_ENABLED="true"\n\nCACHE_STORE="redis"\nCACHE_REDIS="redis://@127.0.0.1"\n```\n\n### Auto-Purging\n\nDirectus can automatically clear the caches whenever a create/update/delete action is performed. This allows you to keep\nthe Directus API real-time, while still getting the performance benefits on quick subsequent reads.\n\n```\nCACHE_AUTO_PURGE="true"\n```\n\n### TTL\n\nBased on your project\'s needs, you might be able to aggressively cache your data, only requiring new data to be fetched\nevery hour or so. This allows you to squeeze the most performance out of your Directus instance. This can be incredibly\nuseful for applications where you have a lot of (public) read-access and where updates aren\'t real-time (for example a\nwebsite). `CACHE_TTL` uses [`ms`](https://www.npmjs.com/package/ms) to parse the value, so you configure it using human\nreadable values (like `2 days`, `7 hrs`, `5m`).\n\n```\nCACHE_TTL="1h"\n```\n\n### Assets\n\nThe cache-control header for the /assets endpoint is separate from the regular data-cache. This is useful as it\'s often\npossible to cache assets for way longer than you would with the actual content.\n\n```\nASSETS_CACHE_TTL="7d"\n```\n\n## oAuth (Single Sign-On (SSO) / OpenID)\n\nDirectus\' oAuth integration provides a powerful alternative way to authenticate into your project. Directus will ask you\nto login on the external service, and if your user exists in Directus, you\'ll be logged in automatically.\n\nDirectus relies on [`grant`](https://www.npmjs.com/package/grant) for the handling of the oAuth flow. This means that\nthere\'s hundreds of services that are supported out of the box. For example, enabling logging in through GitHub is as\neasy as creating an [oAuth app in GitHub](https://github.com/settings/developers) and adding the following to Directus:\n\n```\nOAUTH_PROVIDERS="github"\nOAUTH_GITHUB_KEY="99d3...c3c4"\nOAUTH_GITHUB_SECRET="34ae...f963"\n```\n\n::: warning PUBLIC_URL\n\nThe oAuth flow relies on the `PUBLIC_URL` variable for it\'s redirecting. Make sure that variable is configured\ncorrectly.\n\n:::\n\n#### Multiple Providers\n\n`OAUTH_PROVIDERS` accepts a CSV of providers, allowing you to specify multiple at the same time:\n\n```\nOAUTH_PROVIDERS ="google,microsoft"\n\nOAUTH_GOOGLE_KEY = "<google_application_id>"\nOAUTH_GOOGLE_SECRET=  "<google_application_secret_key>"\nOAUTH_GOOGLE_SCOPE="openid email"\n\nOAUTH_MICROSOFT_KEY = "<microsoft_application_id>"\nOAUTH_MICROSOFT_SECRET = "<microsoft_application_secret_key>"\nOAUTH_MICROSOFT_SCOPE = "openid email"\nOAUTH_MICROSOFT_AUTHORIZE_URL = "https://login.microsoftonline.com/<microsoft_application_id>/oauth2/v2.0/authorize"\nOAUTH_MICROSOFT_ACCESS_URL = "https://login.microsoftonline.com/<microsoft_application_id>/oauth2/v2.0/token"\n\nPUBLIC_URL = "<public_url_of_directus_instance>"\n```\n\n### Provider Specific Configuration\n\nIf you use one of the many supported providers, you often don\'t have to configure any more than just the key and secret\nfor the service. That being said, if you use a more tailored service (like the specific Microsoft application in the\nexample above), you might have to provide more configuration values yourself. Please see\nhttps://github.com/simov/grant#configuration-description for a list of all available configuration flags.\n\n## File Storage\n\nBy default, Directus stores every file you upload locally on disk. Instead of local file storage, you can configure\nDirectus to use S3 or Google Cloud Storage instead:\n\n```\nSTORAGE_LOCATIONS="aws"\n\nSTORAGE_AWS_DRIVER="s3"\nSTORAGE_AWS_KEY="tp15c...510vk"\nSTORAGE_AWS_SECRET="yk29b...b932n"\nSTORAGE_AWS_REGION="us-east-2"\nSTORAGE_AWS_BUCKET="my-files"\n```\n\n### Multiple Storage Adapters\n\nYou can configure multiple storage adapters at the same time. This allows you to choose where files are being uploaded\non a file-by-file basis. To do this, you can provide a CSV of storage location names, and provide a config block for\neach of them:\n\n```\nSTORAGE_LOCATIONS="local,aws"\n\nSTORAGE_LOCAL_DRIVER="local"\nSTORAGE_LOCAL_ROOT="local"\n\nSTORAGE_AWS_KEY="tp15c...510vk"\nSTORAGE_AWS_SECRET="yk29b...b932n"\nSTORAGE_AWS_REGION="us-east-2"\nSTORAGE_AWS_BUCKET="my-files"\n```\n\nIn the Admin App, files will automatically be uploaded to the first configured storage location (in this case `local`).\nThe used storage location is saved under `storage` in `directus_files`.\n\n## Rate Limiting\n\nYou can use the built-in rate-limiter to prevent users from hitting the API too much. To enable the rate-limiter, simply\nset\n\n```\nRATE_LIMITER_ENABLED="true"\n```\n\nThis will kick-in the rate-limiter on a maximum of 50 requests a second. You can configure this using:\n\n```\n// 10 requests per 5 seconds\n\nRATE_LIMITER_POINTS="10"\nRATE_LIMITER_DURATION="5"\n```\n\nOnce you have multiple copies of Directus running under a load-balancer, or your user base grows so much that memory is\nno longer a viable place to store the rate limiter information, you can use an external `memcache` or `redis` instance\nto store the rate limiter data:\n\n```\nRATE_LIMITER_ENABLED="true"\n\nRATE_LIMITER_POINTS="10"\nRATE_LIMITER_DURATION="5"\n\nRATE_LIMITER_STORE="redis"\n\nRATE_LIMITER_REDIS="redis://@127.0.0.1"\n```\n\n## File-Based Configuration\n\nIn case you prefer using a configuration file instead of environment variables, you can use the `CONFIG_PATH`\nenvironment variable to instruct Directus to use a local configuration file instead of environment variables. See\n[Config Files](/reference/config-files.md) for more information.\n'}}]);