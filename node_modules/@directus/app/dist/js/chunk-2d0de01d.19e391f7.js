(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0de01d"],{"848c":function(e,t,n){"use strict";n.r(t),t["default"]='# Assets\n\n> The `/assets` endpoint can be used to stream or retrieve the actual file contents from assets managed within Directus.\n\n## Accessing an Original File\n\nThe location of your actual file originals is based on the project\'s configuration, but you can consistently access them\nvia the API using the following URL.\n\n```\nexample.com/assets/<file-id>\nexample.com/assets/1ac73658-8b62-4dea-b6da-529fbc9d01a4\n```\n\n![Original File](../../assets/original.jpg) _Original File Used — 602KB and 1800x1200_\n\n::: warning Direct File Access\n\nWhile you may _technically_ be able to expose your storage adapters root filesystem and access your raw files through\nthere, it is recommended that you always use the Directus API. This is the only way that you can take advantage of file\npermissions and other built-in features.\n\n:::\n\n## Requesting a Thumbnail\n\nFetching thumbnails is as easy as adding query parameters to the original file\'s URL. If a requested thumbnail doesn\'t\nyet exist, it is dynamically generated and immediately returned. When requesting a thumbnail, the following parameters\nare all required.\n\n- **`fit`** — The **fit** of the thumbnail while always preserving the aspect ratio, can be any of the following\n  options:\n  - `cover` — Covers both width/height by cropping/clipping to fit\n  - `contain` — Contain within both width/height using "letterboxing" as needed\n  - `inside` — Resize to be as large as possible, ensuring dimensions are less than or equal to the requested width and\n    height\n  - `outside` — Resize to be as small as possible, ensuring dimensions are greater than or equal to the requested width\n    and height\n- **`width`** — The **width** of the thumbnail in pixels\n- **`height`** — The **height** of the thumbnail in pixels\n- **`quality`** — The **quality** of the thumbnail (`0` to `100`)\n- **`withoutEnlargement`** — Disable image up-scaling\n- **`download`** — Add `Content-Disposition` header and force browser to download file\n\n```\nexample.com/assets/<file-id>?fit=<fit>&width=<width>&height=<height>&quality=<quality>\nexample.com/assets/1ac73658-8b62-4dea-b6da-529fbc9d01a4?fit=cover&width=200&height=200&quality=80\n```\n\nAlternatively, you can reference a specific thumbnail by its preset key.\n\n- **`key`** — This **key** of the [Storage Asset Preset](/guides/files#creating-thumbnail-presets), a shortcut for the\n  above parameters\n\n```\nexample.com/assets/<file-id>?key=<preset-key>\nexample.com/assets/1ac73658-8b62-4dea-b6da-529fbc9d01a4?key=card\n```\n\n### Cover vs Contain\n\nFor easier comparison, both of the examples below were requested at `200` width, `200` height, and `75` quality. The\n`cover` thumbnail forces the dimensions, trimming the outside edges as needed. The `contain` thumbnail always maintains\nits aspect ratio, shrinking the image to fit _within_ the dimensions and adding "letterboxing" as needed.\n\n| Cover                                                          | Contain                                                            |\n| -------------------------------------------------------------- | ------------------------------------------------------------------ |\n| ![Cover](../../assets/200-200-cover-75.jpg)<br>_8KB • 200x200_ | ![Contain](../../assets/200-200-contain-75.jpg)<br>_6KB • 200x133_ |\n\n::: tip Aspect Ratio\n\nImages are never stretched or distorted even when changing the aspect ratio.\n\n:::\n\n### Quality vs Filesize\n\nThe quality parameter can be any integer from `0-100`. Qualities closer to `0` have lower filesizes, but also poor image\nquality due to compression artifacts. Values closer to `100` have larger filesizes, but better image quality. Below are\nfour possible qualities (200x200 cover) to visually compare the balance between compression and filesize.\n\n| 25%                                                | 50%                                                | 75%                                                | 100%                                                  |\n| -------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------- | ----------------------------------------------------- |\n| ![25%](../../assets/200-200-cover-25.jpg)<br>_4KB_ | ![50%](../../assets/200-200-cover-50.jpg)<br>_6KB_ | ![75%](../../assets/200-200-cover-75.jpg)<br>_8KB_ | ![100%](../../assets/200-200-cover-100.jpg)<br>_38KB_ |\n\n## Downloading a File\n\nTo download an asset with the correct filename, you need to add the `?download` query parameter to the request and the\n`download` attribute to your anchor tag. This will ensure the appropriate [Content-Disposition](https://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html) headers are added. Without this, the download will work on the _same_ domain, however it will have the file\'s "id" as the filename for cross-origin requests.\n\nExample:\n\n```html\n<a href="https://your-directus.com/assets/<file-id>?download" target="_blank" download="Your File.pdf">Download</a>\n```\n'}}]);