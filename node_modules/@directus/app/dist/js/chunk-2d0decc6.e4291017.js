(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0decc6"],{"86d6":function(n,e,s){"use strict";s.r(e),e["default"]='---\npageClass: page-reference\n---\n\n# Authentication\n\n<div class="two-up">\n<div class="left">\n\n> By default, all data in the system is off limits for unauthenticated users. To gain access to protected data, you must\n> include an access token with every request, or\n> [configure permissions for the public role](/guides/roles-and-permissions).\n\n</div>\n\n<div class="right">\n\n[[toc]]\n\n</div>\n</div>\n\n---\n\n## Login\n\nRetrieve a temporary access token and refresh token.\n\n<div class="two-up">\n<div class="left">\n\n### Request Body\n\n<div class="definitions">\n\n`email` **Required**\\\nEmail address of the user you\'re retrieving the access token for.\n\n`password` **Required**\\\nPassword of the user.\n\n`otp`\\\nThe user\'s one-time-password (if MFA is enabled).\n\n`mode`\\\nWhether to retrieve the refresh token in the JSON response, or in a `httpOnly` `secure` cookie. One of `json`, `cookie`.\n\n</div>\n\n### Response Attributes\n\n<div class="definitions">\n\n`access_token` **string**\\\nTemporary access token to be used in follow-up requests.\n\n`expires` **integer**\\\nHow long before the access token will expire. Value is in milliseconds.\n\n`refresh_token` **string**\\\nThe token that can be used to retrieve a new access token through [`/auth/refresh`](#refresh). Note: if you used `cookie`\nas the mode in the request, the refresh token won\'t be returned in the JSON.\n\n</div>\n\n::: tip Expiry time\n\nThe token\'s expiration time can be configured through\n[the `ACCESS_TOKEN_TTL` environment variable](/reference/environment-variables).\n\n:::\n\n</div>\n<div class="right">\n\n```\nPOST /auth/login\n```\n\n```json\n// Request\n\n{\n\t"email": "admin@example.com",\n\t"password": "d1r3ct5us"\n}\n```\n\n```json\n// Response\n\n{\n\t"data": {\n\t\t"access_token": "eyJh...KmUk",\n\t\t"expires": 900000,\n\t\t"refresh_token": "gmPd...8wuB"\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Refresh\n\nRetrieve a new access token using a refresh token.\n\n<div class="two-up">\n<div class="left">\n\n### Request Body\n\n<div class="definitions">\n\n`refresh_token`\\\nThe refresh token to use. If you have the refresh token in a cookie through [`/auth/login`](#login), you don\'t have to submit\nit here.\n\n</div>\n\n### Response Attributes\n\n<div class="definitions">\n\n`access_token` **string**\\\nTemporary access token to be used in follow-up requests.\n\n`expires` **integer**\\\nHow long before the access token will expire. Value is in milliseconds.\n\n`refresh_token` **string**\\\nThe token that can be used to retrieve a new access token through [`/auth/refresh`](#refresh). Note: if you used `cookie`\nas the mode in the request, the refresh token won\'t be returned in the JSON.\n\n</div>\n\n</div>\n<div class="right">\n\n```\nPOST /auth/refresh\n```\n\n```json\n// Request\n\n{\n\t"refresh_token": "gmPd...8wuB"\n}\n```\n\n```json\n// Response\n\n{\n\t"data": {\n\t\t"access_token": "eyJh...KmUk",\n\t\t"expires": 900000,\n\t\t"refresh_token": "JAnU...E-Gc"\n\t}\n}\n```\n\n</div>\n</div>\n\n---\n\n## Logout\n\nInvalidate the refresh token thus destroying the user\'s session.\n\n<div class="two-up">\n<div class="left">\n\n### Request Body\n\n<div class="definitions">\n\n`refresh_token`\\\nThe refresh token to invalidate. If you have the refresh token in a cookie through [`/auth/login`](#login), you don\'t have\nto submit it here.\n\n</div>\n\n</div>\n<div class="right">\n\n```\nPOST /auth/logout\n```\n\n```json\n// Request\n\n{\n\t"refresh_token": "gmPd...8wuB"\n}\n```\n\n```json\n// Empty Response\n```\n\n</div>\n</div>\n\n---\n\n## Request Password Reset\n\nRequest a password reset email to be sent to the given user.\n\n<div class="two-up">\n<div class="left">\n\n### Request Body\n\n<div class="definitions">\n\n`email` **Required**\\\nEmail address of the user you\'re requesting a password reset for.\n\n`reset_url`\\\nProvide a custom reset url which the link in the email will lead to. The reset token will be passed as a parameter.\\\n**Note**: You need to configure the\n[`PASSWORD_RESET_URL_ALLOW_LIST` environment variable](/reference/environment-variables/#security) to enable this\nfeature.\n\n</div>\n\n</div>\n<div class="right">\n\n```\nPOST /auth/password/request\n```\n\n```json\n// Request\n\n{\n\t"email": "admin@example.com"\n}\n```\n\n```json\n// Empty Response\n```\n\n</div>\n</div>\n\n---\n\n## Reset a Password\n\nThe request a password reset endpoint sends an email with a link to the admin app (or a custom route) which in turn uses\nthis endpoint to allow the user to reset their password.\n\n<div class="two-up">\n<div class="left">\n\n### Request Body\n\n<div class="definitions">\n\n`token` **Required**\\\nPassword reset token, as provided in the email sent by the request endpoint.\n\n`password` **Required**\\\nNew password for the user.\n\n</div>\n\n</div>\n<div class="right">\n\n```\nPOST /auth/password/reset\n```\n\n```json\n// Request\n\n{\n\t"token": "eyJh...KmUk",\n\t"password": "d1r3ctu5"\n}\n```\n\n```json\n// Empty Response\n```\n\n</div>\n</div>\n\n---\n\n## List oAuth providers\n\nList all the configured oAuth providers.\n\n<div class="two-up">\n<div class="left">\n\n::: tip Configuring oAuth\n\nTo learn more about setting up oAuth providers, see\n[Configuring SSO through oAuth](/guides/api-config/#oauth-single-sign-on-openid).\n\n:::\n\n### Response Attributes\n\n<div class="definitions">\n\n`data` **Array**\\\nArray of configured oAuth providers.\n\n</div>\n\n</div>\n<div class="right">\n\n```\nGET /auth/oauth\n```\n\n```json\n// Response\n\n{\n\t"data": ["GitHub", "Google", "Okta"]\n}\n```\n\n</div>\n</div>\n\n---\n\n## Login using oAuth provider\n\nWill redirect to the configured oAuth provider for the user to login.\n\n<div class="two-up">\n<div class="right">\n\n```\nGET /auth/oauth/:provider\n```\n\n```json\n// Redirect to oAuth provider\n```\n\n</div>\n</div>\n\n---\n'}}]);