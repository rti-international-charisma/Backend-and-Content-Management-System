(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0f0e1d"],{"9dea":function(t,e,n){"use strict";n.r(e),e["default"]='# Item Group\n\nProvides the ability to make groups of items out of any nested component. Can be reused to make more advanced selectable\nelements like a list of cards, or a button group.\n\n## Usage\n\n```html\n<template>\n\t<v-item-group v-model="selection">\n\t\t<div class="whatever-nested-markup">\n\t\t\t<v-item v-slot:default="{ active, toggle }" v-for="n in 5">\n\t\t\t\t<p :class="{ active }">Item {{ n }}</p>\n\t\t\t\t<v-button @click="toggle">Click me to {{ active ? \'activate\' : \'deactivate\' }}</v-button>\n\t\t\t</v-item>\n\t\t</div>\n\t</v-item-group>\n</template>\n\n<script lang="ts">\n\timport { defineComponent, ref } from \'@vue/composition-api\';\n\n\texport default defineComponent({\n\t\tsetup() {\n\t\t\tconst selection = ref([]);\n\t\t\treturn { selection };\n\t\t},\n\t});\n<\/script>\n```\n\nThe `v-item-group` component will keep the final state for the selection; every nested `v-item` component will be\nregistered to the context of the first `v-item-group` parent up in the tree. This means that `v-item` can be in any\nnested component or sibling:\n\n```html\n<v-item-group>\n\t<v-item />\n\t<div>\n\t\t<v-item />\n\t</div>\n\t<div>\n\t\t<v-button>\n\t\t\t<v-item />\n\t\t</v-button>\n\t</div>\n</v-item-group>\n```\n\nIt also means you can theoretically nest item-groups inside of items:\n\n```html\n<v-item-group>\n\t<v-item />\n\t<div>\n\t\t<v-item>\n\t\t\t<v-item-group>\n\t\t\t\t<v-item />\n\t\t\t\t<div>\n\t\t\t\t\t<v-item />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<v-button>\n\t\t\t\t\t\t<v-item />\n\t\t\t\t\t</v-button>\n\t\t\t\t</div>\n\t\t\t</v-item-group>\n\t\t</v-item>\n\t</div>\n\t<div>\n\t\t<v-button>\n\t\t\t<v-item />\n\t\t</v-button>\n\t</div>\n</v-item-group>\n```\n\n(That being said, if you ever find yourself in this situation, think long and hard if what you\'re doing makes sense)\n\n### Active / Toggle\n\nEvery `v-item` provides the `active` state and a `toggle` function to the default slot. Use this to render custom markup\n/ styling and to toggle the active state for this item:\n\n```html\n<v-item v-slot:default="{ active, toggle }">\n\t<p :class="{ active }">Am I active? {{ active }}</p>\n\t<v-button @click="toggle">Toggle active state</v-button>\n</v-item>\n```\n\n### Custom values\n\nBy default, the `v-item-group` component will use the index of the child as model value (eg `[2, 4]`). The child\n`v-item` component accepts a `value` prop that lets you choose what is used as identifier for the v-item. This can be\nuseful when you\'re working with a predefined list of items:\n\n```html\n<template>\n\t<v-item-group v-model="selection">\n\t\t<v-item v-for="item in items" :value="item.id">{{ item.title }}</v-item>\n\t</v-item-group>\n</template>\n\n<script lang="ts">\n\timport { defineComponent, ref } from \'@vue/composition-api\';\n\n\texport default defineComponent({\n\t\tsetup() {\n\t\t\tconst selection = ref([]);\n\t\t\tconst items = [\n\t\t\t\t{\n\t\t\t\t\tid: 15,\n\t\t\t\t\ttitle: \'Hello world\',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 414,\n\t\t\t\t\ttitle: \'This might be the hardest component i built\',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \'jolly\',\n\t\t\t\t\ttitle: \'Goooooood times\',\n\t\t\t\t},\n\t\t\t];\n\t\t\treturn { selection };\n\t\t},\n\t});\n<\/script>\n```\n\nIn this case, the selection state for all items selected would be `[15, 414, \'jolly\']`\n\n## Reference\n\n#### Props\n\n| Prop        | Description                                           | Default        | Type                   |\n| ----------- | ----------------------------------------------------- | -------------- | ---------------------- |\n| `value`     | Used with `v-model` to model the selected items       | `undefined`    | `(string or number)[]` |\n| `mandatory` | If enabled, at least one item has to be selected      | `false`        | `Boolean`              |\n| `max`       | The maximum amount of items that can be selected      | `-1`           | `Number`               |\n| `multiple`  | If enabled, multiple elements can be selected         | `false`        | `Boolean`              |\n| `scope`     | Items that do not have the same scope will be ignored | `\'item-group\'` | `String`               |\n\n#### Events\n\n| Event   | Description                      | Value                |\n| ------- | -------------------------------- | -------------------- |\n| `input` | Used to update the modeled value | (String or Number)[] |\n\n#### Slots\n\n| Slot      | Description                                                 | Data |\n| --------- | ----------------------------------------------------------- | ---- |\n| _default_ | All items placed inside here will be part of the item group |      |\n'}}]);