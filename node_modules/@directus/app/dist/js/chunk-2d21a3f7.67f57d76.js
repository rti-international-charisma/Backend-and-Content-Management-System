(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21a3f7"],{bb67:function(e,n,t){"use strict";t.r(n),n["default"]='# Relationships\n\n> As you might have guessed, relationships are a crucial part of any relational database. Directus supports all standard\n> relationship types, as well as a few more _compound_ types that offer greater flexibility.\n\nWhile it may seem complex at first, relational data is actually quite straightforward once you understand what\'s\nhappening behind the confusing terminology. Before diving into the details of each type, let\'s first cover a few basics\nthat will help you better visualize each in your mind\'s eye.\n\n### Primary and Foreign Keys\n\nEvery [Item](/concepts/items/) in a relational database has a unique "key" that identifies it within\nits [Collection](/concepts/collections/). Because it\'s required, the key is the first\n[field](/concepts/fields/) created within a collection, typically storing an "auto-increment" number,\nan automatically generated unique hash, or a manually entered value. They are often abbreviated to "PK" (Primary Key),\n"ID" (Identifier), "UID" (Unique Identifier), or "UUID" (Universally Unique Identifier), depending on the type of value\nthey store. After it\'s created, the value of an item\'s PK should _never_ change.\n\nTo link items together relationally, you simply save a reference of an item\'s PK in a different field. That _reference_\nis called a Foreign Key (FK).\n\n::: tip Compound Keys\n\nTo keep things simple, we\'ve ignored compound keys in the above explanation.\n\n:::\n\n### Perspective Matters\n\nJust like primary and foreign keys are directional, relationships are always relative to their "parent" collection.\nLooking at the same relationship/key from the perspective of a different collection may change or reverse its type.\n\n## Many-to-One (M2O)\n\nA Many-to-One (M2O) relationship exists on a field that saves a single FK. For example, a _city_ can only be in one\n_country_, but a _country_ can have many _cities_. So the M2O data model would look like this:\n\n```\ncities ("Many" Collection)\n- id (PK)\n- name\n- country (M2O that stores the FK to a country)\n\ncountry ("One" Collection)\n- id (PK, the value saved to "cities.country")\n- name\n```\n\n## One-to-Many (O2M)\n\nA One-to-Many (O2M) relationship uses an alias field to reference one or more FKs in a M2O. This is the _exact same_\nrelationship as the M2O above, but looking at it from the opposite perspective (see\n[Perspective Matters](#perspective-matters)). So the O2M data model is the same, but adds an alias "cities" field to the\nCountry collection, like this:\n\n```\ncountry ("One" Collection)\n- id (PK, the value saved to "cities.country")\n- name\n- *cities* (O2M alias field that pulls in references from "cities.country")\n\ncities ("Many" Collection)\n- id (PK)\n- name\n- country (stores the FK to a country)\n```\n\n::: tip Manual Reordering\n\nTo enable manual reordering for a O2M, simply add a field with the `sort` type to the "many" side\n(`cities` in the above example).\n\n:::\n\n::: tip Translations\n\nThe Translations interface allows [creating multilingual content](/concepts/translations/#content-translations)\nrelationally. It is a standard O2M relationship with an additional field on the "many" collection to hold\nthe language key.\n\n:::\n\n## Many-to-Many (M2M)\n\nA Many-to-Many (M2M) relationship uses a "Junction Table" to connect many items from one collection, to many items of\nanother collection. For example, a _recipe_ can have many _ingredients_, and _ingredients_ can be in many _recipes_. So\nthe M2M data model would look like this:\n\n```\nrecipes (Collection)\n- id (PK, the value saved to "recipe_ingredients.recipe")\n- name\n- *ingredients* (M2M/O2M alias field that pulls in references from recipe_ingredients)\n\ningredients (Collection)\n- id (PK, the value saved to "recipe_ingredients.ingredient")\n- name\n- *recipes* (M2M/O2M alias field that pulls in references from recipe_ingredients)\n\nrecipe_ingredients (Junction Collection)\n- id (PK)\n- recipe (stores the FK to a recipe)\n- ingredient (stores the FK to a ingredient)\n- quantity\n```\n\nNotice that the example above also has a `quantity` field on the junction table. You can add any contextual fields to\nthe junction, and they will also be included in the App\'s relational edit form.\n\n::: tip Actually just two O2Ms\n\nAn M2M is technically two relationships viewed as one. Each side has a O2M to the Junction Table that sits in the\nmiddle. In that sense, there really is no "M2M".\n\n:::\n\n::: tip Manual Reordering\n\nTo enable manual reordering for a M2M, simply add a numeric field to the junction table and set it as\nthe [Collection Sort](/guides/collections/#sort).\n\n:::\n\n::: tip Self-Referencing\n\nYou can also have a M2M relationship that connects items within the _same_ collection. As example\nof this is "Related Articles", where an article might relate to many other articles.\n\n:::\n\n## One-to-One (O2O)\n\nDirectus does not include a dedicated one-to-one (O2O) relationship type or interface. However, O2O is essentially the same as a\nM2O (storing a foreign key). The only difference is that a O2O enforces the cardinality. In other words, selecting a\nrelational item in a O2O means that item can not be selected elsewhere (it can only be used once). This functionality\ncan be added by checking and constraining uniqueness via a [custom event hook](/guides/api-hooks) or\n[custom interface](/guides/interfaces).\n\nAn example of a O2O is: a _person_ only has one unique set of _fingerprints_, and those _fingerprints_ only belong to\none _person_.\n\n## Many-to-Any (M2A)\n\nSometimes called a "matrix field" or "replicator", the Many-to-Any (M2A) relationship is essentially the same as a M2M,\nbut with one crucial difference: the junction table also stores the _parent collection name of the FK_. This "compound\nkey" combines the collection name and FK to provide a unique reference to _any_ other item within the project. You can\nthen artificially limit which collections are valid through an "allow list".\n\nAn example of a M2A is a "Page Builder", which typically have different component Collections such as "Heading", "Text Block", or "Media Asset", and a _Pages_ collection on which you can add and arrange them. In this example the junction table will link a specific page with components from a number of different collections, allowing for the creation of relational page layouts.\n\n\x3c!--\n\n@TODO\n\n```\n[ ] o2o\n[x] m2o           (dropdown)\n[x] o2m           (table, repeater)\n\n[x] m2m [o2m-m2o] (table, repeater)\n\n[ ] o2a           (builder)\n[x] a2o\n\n[x] m2a [o2m-a2o] (builder)\n[ ] a2m [o2a-m2o]\n[ ] a2a [o2a-a2o] (dynamic builder)\n```\n--\x3e\n'}}]);