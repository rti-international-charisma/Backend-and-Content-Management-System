(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21b88a"],{bfd4:function(n,e,t){"use strict";t.r(e),e["default"]='# Config Files\n\nBy default, Directus will read the `.env` file located next to your project\'s `package.json` for it\'s config. You can\nchange the path where this file is read from, including the filename, by setting the `CONFIG_PATH` environment variable before starting Directus.\n\nFor example: `CONFIG_PATH="/path/to/config.js" npx directus start`\n\nThe config file can be one of the following formats:\n\n[[toc]]\n\n::: tip Configuration Parameters\n\nSee [Environment Variables](/reference/environment-variables/) for an overview of all available environment variables.\n\n:::\n\n## .env\n\nIf the config path has no file extension, or a file extension that\'s not one of the other supported formats, Directus\nwill try reading the file config path as environment variables. This has the following structure:\n\n```\nPORT=8055\n\nDB_CLIENT="pg"\nDB_HOST="localhost"\nDB_PORT=5432\n\netc\n```\n\n## config.json\n\nIf you prefer a single JSON file for all your configuration, create a JSON file with the environment variables as keys,\nfor example:\n\n```\nCONFIG_PATH="/path/to/config.json"\n```\n\n```json\n{\n\t"PORT": 8055,\n\n\t"DB_CLIENT": "pg",\n\t"DB_HOST": "localhost",\n\t"DB_PORT": 5432\n\n\t// etc\n}\n```\n\n## config.yaml\n\nSimilar to JSON, you can use a `.yaml` (or `.yml`) file for your config:\n\n```\nCONFIG_PATH="/path/to/config.yaml"\n```\n\n```yaml\nPORT: 8055\n\nDB_CLIENT: pg\nDB_HOST: localhost\nDB_PORT: 5432\n#\n# etc\n```\n\n## config.js\n\nA JavaScript based configuration file allows for two different structures of configuration: an object or a function.\nUsing a JS file for your config allows you to dynamically generate the configuration of the project during startup.\n\n### Object\n\nExport the configuration object where the key is the environment variable name:\n\n```js\nmodule.exports = {\n\tPORT: 8055,\n\n\tDB_CLIENT: \'pg\',\n\tDB_HOST: \'localhost\',\n\tDB_PORT: 5432,\n\n\t// etc\n};\n```\n\n### Function\n\nAlternatively, you can provide a function that returns the above object. The function gets process.env as it\'s\nparameter.\n\n```js\nmodule.exports = function (env) {\n\treturn {\n\t\tPORT: 8055,\n\n\t\tDB_CLIENT: \'pg\',\n\t\tDB_HOST: \'localhost\',\n\t\tDB_PORT: 5432,\n\n\t\t// etc\n\t};\n};\n```\n'}}]);