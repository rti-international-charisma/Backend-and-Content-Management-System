(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d2376e3"],{faa3:function(n,e,t){"use strict";t.r(e),e["default"]="# Custom Displays <small></small>\n\n> Displays are small inline components that allow you to create new ways of viewing field values throughout the App.\n> [Learn more about Displays](/concepts/displays/).\n\n## 1. Setup the Boilerplate\n\nEvery display is a standalone \"package\" that contains at least a metadata file and a Vue component. We recommend using\nthe following file structure:\n\n```\nsrc/\n\tindex.js\n\tdisplay.vue\n```\n\n### src/index.js\n\n```js\nimport DisplayComponent from './display.vue';\n\nexport default {\n\tid: 'custom',\n\tname: 'Custom',\n\tdescription: 'This is my custom display!',\n\ticon: 'box',\n\thandler: DisplayComponent,\n\ttypes: ['string'],\n};\n```\n\n- `id` — The unique key for this display. It is good practice to scope proprietary displays with an author prefix.\n- `name` — The human-readable name for this display.\n- `description` — A short description (<80 characters) of this display shown in the App.\n- `icon` — An icon name from the material icon set, or the extended list of Directus custom icons.\n- `handler` — A function, or reference to your Vue component.\n- `types` — A CSV of supported [types](/concepts/types/).\n\n::: tip\n\n[See the TypeScript definition](https://github.com/directus/directus/blob/20355fee5eba514dd75565f60269311187010c66/app/src/displays/types.ts#L24-L34)\nfor more info on what can go into this object.\n\n:::\n\n### src/display.vue\n\n```vue\n<template>\n\t<div>My Custom Display</div>\n</template>\n\n<script>\nexport default {};\n<\/script>\n```\n\nThe props you can use in an display are:\n\n- `value` — The value of the parent field.\n- `interface` - The interface of the parent field.\n- `interface-options` - The options for the parent field's interface.\n- `type` — The type of the parent field.\n- `collection` — The collection name of the parent field.\n- `field` — The key of the parent field.\n\n---\n\nAlternatively, you can specify a function for the handler. This allows you to make simple displays that don't need a\nfull component rendered:\n\n```js\nexport default {\n\tid: 'custom',\n\tname: 'Custom',\n\tdescription: 'This is my custom display!',\n\ticon: 'box',\n\thandler: function (value) {\n\t\treturn value.toLowerCase();\n\t},\n\ttypes: ['string'],\n};\n```\n\n## 2. Install Dependencies and Configure the Buildchain\n\nSet up a package.json file by running:\n\n```bash\nnpm init -y\n```\n\nTo be read by the Admin App, your custom display's Vue component must first be bundled into a single `index.js` file. We\nrecommend bundling your code using Rollup. To install this and the other development dependencies, run this command:\n\n```bash\nnpm i -D rollup rollup-plugin-commonjs rollup-plugin-node-resolve rollup-plugin-terser rollup-plugin-vue@5.0.0 @vue/compiler-sfc rollup-plugin-vue@next\n```\n\nYou can then use the following Rollup configuration within `rollup.config.js`:\n\n```js\nimport { terser } from 'rollup-plugin-terser';\nimport resolve from 'rollup-plugin-node-resolve';\nimport commonjs from 'rollup-plugin-commonjs';\nimport vue from 'rollup-plugin-vue';\n\nexport default {\n\tinput: 'src/index.js',\n\toutput: {\n\t\tformat: 'es',\n\t\tfile: 'dist/index.js',\n\t},\n\tplugins: [terser(), resolve(), commonjs(), vue()],\n};\n```\n\n## 3. Develop Your Custom Display\n\nThe display itself is simply a function or a Vue component, providing a blank canvas for creating anything you need.\n\n## 4. Build and Deploy\n\nTo build the display for use within Directus, run:\n\n```bash\nnpx rollup -c\n```\n\nFinally, move the output from your display's `dist` folder into your project's `/extensions/displays` folder. Keep in\nmind that the extensions directory is configurable within your env file, and may be located elsewhere.\n"}}]);